/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package RFIDManagement.view;

import RFIDManagement.model.*;
import java.awt.Color;
import java.awt.Desktop;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.ParserConfigurationException;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.w3c.dom.Element;
import org.xml.sax.SAXException;

/**
 * @author Team 16
 * @created 11/05/2016 - v1.0
 * @version 2.2 30/10/2016
 * @The main UI of RFID system
 */
public class StartPage extends javax.swing.JFrame {

    private Student std = null;
    private Teacher tch = null;
    private Card cd = null;
    private ArrayList<String> toPass = null;
    protected File file = null;
    private int currentTabbedPanel = 0;
    private JComboBox jComboBox = new JComboBox();
    private CourseName[] courseName = CourseName.values();

    /**
     * Creates new form NewJFrame
     */
    public StartPage() {
        initComponents();
        this.setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("5.png")));
    }

    public boolean checkID(String toCheck) {
        try {
            Integer.parseInt(toCheck);
        } catch (NumberFormatException | NullPointerException e) {
            return false;
        }
        return true;
    }

    public boolean checkName(String toCheck) {
        if (toCheck.isEmpty()) {
            return false;
        }
        return true;
    }

    public boolean checkURL(String toCheck) {
        if (toCheck.isEmpty()) {
            return false;
        }
        int k = 0;
        toCheck = toCheck.toUpperCase();
        char[] stringToCharArray = toCheck.toCharArray();
        if (stringToCharArray.length < 10) {
            return false;
        }
        char[] http = new char[]{'H', 'T', 'T', 'P'};
        for (int i = 0; i < 4; i++) {
            if (stringToCharArray[i] == http[i]) {
                k++;
            }
        }
        if (k == 4) {
            return true;
        }
        return false;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        userGroup = new javax.swing.ButtonGroup();
        tabbedPanel = new javax.swing.JTabbedPane();
        scannerPanel = new javax.swing.JPanel();
        scanLable = new javax.swing.JLabel();
        scanInput = new javax.swing.JTextField();
        scanRstLab = new javax.swing.JLabel();
        searchPanel = new javax.swing.JPanel();
        searchLable = new javax.swing.JLabel();
        searchInput = new javax.swing.JTextField();
        searchRstLab = new javax.swing.JLabel();
        registerPanel = new javax.swing.JPanel();
        registerLable = new javax.swing.JLabel();
        userCombo = new javax.swing.JComboBox<>();
        userLable = new javax.swing.JLabel();
        roomNoCombo = new javax.swing.JComboBox();
        roomNoLable = new javax.swing.JLabel();
        userIDField = new javax.swing.JTextField();
        userIDLable = new javax.swing.JLabel();
        userNameField = new javax.swing.JTextField();
        userNameLable = new javax.swing.JLabel();
        registerNext = new javax.swing.JButton();
        prourlLbl = new javax.swing.JLabel();
        prourlText = new javax.swing.JTextField();
        turlLab = new javax.swing.JLabel();
        turlTxt = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        roomBox = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        generateBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("RFID Management");
        setBounds(new java.awt.Rectangle(0, 0, 0, 0));
        setResizable(false);

        tabbedPanel.setFocusable(false);
        tabbedPanel.setPreferredSize(new java.awt.Dimension(430, 250));
        tabbedPanel.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tabbedPanelStateChanged(evt);
            }
        });

        scanLable.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        scanLable.setText("Scan With RFID bracelet or card:");
        scanLable.setPreferredSize(null);

        scanInput.setFont(new java.awt.Font("Calibri", 0, 24)); // NOI18N
        scanInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scanInputActionPerformed(evt);
            }
        });
        scanInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                scanInputKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout scannerPanelLayout = new javax.swing.GroupLayout(scannerPanel);
        scannerPanel.setLayout(scannerPanelLayout);
        scannerPanelLayout.setHorizontalGroup(
            scannerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(scannerPanelLayout.createSequentialGroup()
                .addGap(92, 92, 92)
                .addGroup(scannerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scanLable, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(scanInput)
                    .addComponent(scanRstLab, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(92, Short.MAX_VALUE))
        );
        scannerPanelLayout.setVerticalGroup(
            scannerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(scannerPanelLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(scanLable, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(scanInput, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(scanRstLab, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(46, Short.MAX_VALUE))
        );

        tabbedPanel.addTab("Scanner", scannerPanel);

        searchLable.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        searchLable.setText("Scan With RFID Tag:");
        searchLable.setPreferredSize(new java.awt.Dimension(241, 50));

        searchInput.setFont(new java.awt.Font("Calibri", 0, 24)); // NOI18N
        searchInput.setPreferredSize(new java.awt.Dimension(241, 50));
        searchInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchInputKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout searchPanelLayout = new javax.swing.GroupLayout(searchPanel);
        searchPanel.setLayout(searchPanelLayout);
        searchPanelLayout.setHorizontalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPanelLayout.createSequentialGroup()
                .addGap(92, 92, 92)
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(searchLable, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(searchInput, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(searchRstLab, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(92, Short.MAX_VALUE))
        );
        searchPanelLayout.setVerticalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPanelLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(searchLable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(searchInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(searchRstLab, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(46, Short.MAX_VALUE))
        );

        tabbedPanel.addTab("Search", searchPanel);

        registerLable.setText("Fill out the form below:");

        userCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Student", "Teacher", "Card" }));
        userCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userComboActionPerformed(evt);
            }
        });

        userLable.setText("Register for:");

        roomNoCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1" }));

        roomNoLable.setText("Room No:");

        userIDLable.setText("Student ID:");

        userNameLable.setText("Name:");

        registerNext.setText("Next");
        registerNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registerNextActionPerformed(evt);
            }
        });

        prourlLbl.setText("Profile URL:");

        turlLab.setText("Teacher URL:");

        turlTxt.setEnabled(false);

        javax.swing.GroupLayout registerPanelLayout = new javax.swing.GroupLayout(registerPanel);
        registerPanel.setLayout(registerPanelLayout);
        registerPanelLayout.setHorizontalGroup(
            registerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(registerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(registerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(registerPanelLayout.createSequentialGroup()
                        .addGroup(registerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(registerPanelLayout.createSequentialGroup()
                                .addComponent(userLable)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(userCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(registerLable, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(registerPanelLayout.createSequentialGroup()
                                .addComponent(userIDLable)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(userIDField, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(24, 24, 24)
                        .addGroup(registerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(registerPanelLayout.createSequentialGroup()
                                .addComponent(userNameLable)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(userNameField))
                            .addGroup(registerPanelLayout.createSequentialGroup()
                                .addComponent(roomNoLable)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(roomNoCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 170, Short.MAX_VALUE))))
                    .addGroup(registerPanelLayout.createSequentialGroup()
                        .addGroup(registerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(turlLab)
                            .addComponent(prourlLbl))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(registerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(prourlText)
                            .addComponent(turlTxt))))
                .addContainerGap())
            .addGroup(registerPanelLayout.createSequentialGroup()
                .addGap(150, 150, 150)
                .addComponent(registerNext, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        registerPanelLayout.setVerticalGroup(
            registerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(registerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(registerLable, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(registerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(roomNoLable)
                    .addComponent(roomNoCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(userLable)
                    .addComponent(userCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(registerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(registerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(userNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(userNameLable)
                        .addComponent(userIDField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(userIDLable))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(registerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(prourlLbl)
                    .addComponent(prourlText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(registerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(turlLab)
                    .addComponent(turlTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(registerNext, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(29, Short.MAX_VALUE))
        );

        tabbedPanel.addTab("Register", registerPanel);

        roomBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1"}));
        roomBox.setPreferredSize(new java.awt.Dimension(50, 23));

        jLabel1.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        jLabel1.setText("Room:");

        generateBtn.setFont(new java.awt.Font("Calibri", 0, 24)); // NOI18N
        generateBtn.setText("Generate");
        generateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(112, 112, 112)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(generateBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(roomBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(113, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(roomBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(generateBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(70, Short.MAX_VALUE))
        );

        tabbedPanel.addTab("Report", jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(tabbedPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 430, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabbedPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void generateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateBtnActionPerformed
        // TODO add your handling code here:
        String room = this.roomBox.getSelectedItem().toString();
        History hist = new History();
        if(hist.generateHistoryFile(room)){
        JOptionPane.showMessageDialog(null,
                        " History file is successfully generate on the desktop",
                        "Message",
                        JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(null,
                        "Generated history file failed!",
                        "ERROR",
                        JOptionPane.ERROR_MESSAGE);
        }
        
    }//GEN-LAST:event_generateBtnActionPerformed

    private void registerNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registerNextActionPerformed
        // Identify the registration of teacher or student or card
        boolean check = false;
        //int id = 0;
        if (userCombo.getSelectedItem().equals("Teacher")) {
            this.tch = new Teacher();
            check = checkName(userNameField.getText());
            if (check) {
                String name = userNameField.getText();
                tch.setName(name);
            } else {
                JOptionPane.showMessageDialog(null,
                        "Name can not be empty!",
                        "Warning",
                        JOptionPane.WARNING_MESSAGE);
                return;
            }
            int roomnum = Integer.parseInt((String) roomNoCombo.getSelectedItem());
            tch.setRoomnum(roomnum);
            RegTag regTag = new RegTag();
            regTag.setTch(tch);
            regTag.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
            regTag.setVisible(true);

        } else if (userCombo.getSelectedItem().equals("Student")) {
            this.std = new Student();
            check = checkID(userIDField.getText());

            if (check) {
                std.setId(Integer.parseInt(userIDField.getText()));
            } else {
                JOptionPane.showMessageDialog(null,
                        "Student ID must be numeric!",
                        "Warning",
                        JOptionPane.WARNING_MESSAGE);
                return;
            }
            check = checkName(userNameField.getText());
            if (check) {
                String name = userNameField.getText();
                std.setName(name);
            } else {
                JOptionPane.showMessageDialog(null,
                        "Name can not be empty!",
                        "Warning",
                        JOptionPane.WARNING_MESSAGE);
                return;
            }

            int roomnum = Integer.parseInt((String) roomNoCombo.getSelectedItem());
            std.setRoom(roomnum);
            check = checkURL(prourlText.getText());
            if (check) {
                String url = prourlText.getText();
                std.setProUrl(url);
            } else {
                JOptionPane.showMessageDialog(null,
                        "Invalid URL input(too short or not start with 'http://')!",
                        "Warning",
                        JOptionPane.WARNING_MESSAGE);
                return;
            }
            RegTag regTag = new RegTag();
            regTag.setStd(std);
            regTag.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
            regTag.setVisible(true);

        } else {
            this.cd = new Card();
            check = checkName(roomNoCombo.getSelectedItem().toString());
            if (check) {
                cd.setName(roomNoCombo.getSelectedItem().toString());
            } else {
                JOptionPane.showMessageDialog(null,
                        "Card name can not be empty !",
                        "Warning",
                        JOptionPane.WARNING_MESSAGE);
                return;
            }
            check = checkURL(prourlText.getText());
            if (check) {
                String stuUrl = prourlText.getText();
                cd.setStuUrl(stuUrl);
            } else {
                JOptionPane.showMessageDialog(null,
                        "Invalid student URL input(too short or not start with 'http://')!",
                        "Warning",
                        JOptionPane.WARNING_MESSAGE);
                return;
            }
            check = checkURL(turlTxt.getText());
            if (check) {
                String tchUrl = turlTxt.getText();
                cd.setTeachUrl(tchUrl);
            } else {
                JOptionPane.showMessageDialog(null,
                        "Invalid teacher URL input(make sure it starts with 'http://')!",
                        "Warning",
                        JOptionPane.WARNING_MESSAGE);
                return;
            }
            RegTag regTag = new RegTag();
            regTag.setCd(cd);
            regTag.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
            regTag.setVisible(true);
        }

        //switch to regtag for swiping bracelets
    }//GEN-LAST:event_registerNextActionPerformed

    private void userComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userComboActionPerformed
        // the control of ID input, if it is a teacher, it is not possible to input id
        if (userCombo.getSelectedItem().equals("Teacher")) {
            clearInput();
            prourlLbl.setText("Profile URL:");
            userIDField.setEnabled(false);
            prourlText.setEnabled(false);
            roomNoCombo.setEnabled(true);
            turlTxt.setEnabled(false);
            userNameField.setEnabled(true);
            setComboBox(false);
            roomNoLable.setText("Room No:");
        } else if (userCombo.getSelectedItem().equals("Student")) {
            clearInput();
            prourlLbl.setText("Profile URL:");
            userIDField.setEnabled(true);
            prourlText.setEnabled(true);
            roomNoCombo.setEnabled(true);
            turlTxt.setEnabled(false);
            userNameField.setEnabled(true);
            setComboBox(false);
            roomNoLable.setText("Room No:");
        } else {
            clearInput();
            prourlLbl.setText("Stuent URL:");
            roomNoLable.setText("Course Name:");
            userIDField.setEnabled(false);
            prourlText.setEnabled(true);
            roomNoCombo.setEnabled(true);
            turlTxt.setEnabled(true);
            userNameField.setEnabled(false);
            setComboBox(true);
        }
    }//GEN-LAST:event_userComboActionPerformed

    private void searchInputKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchInputKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            String toOpen = System.getProperty("user.home") + "/Documents/RFID Database/1/" + this.searchInput.getText() + ".xml";
            File nFile = new File(toOpen);
            DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder dBuilder = null;
            Document doc = null;
            if (nFile.exists()) {
                try {
                    dBuilder = dbFactory.newDocumentBuilder();
                    doc = dBuilder.parse(nFile);
                    this.toPass = new ArrayList<String>();
                    if (doc.getElementsByTagName("id").item(0).getTextContent().equals("T")) {
                        this.toPass.add(doc.getElementsByTagName("name").item(0).getTextContent());
                        this.toPass.add(doc.getElementsByTagName("roomnum").item(0).getTextContent());
                        SearchTeacher search = new SearchTeacher(toPass, nFile);
                        search.setVisible(true);
                        search.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
                    } else {
                        this.toPass.add(doc.getElementsByTagName("id").item(0).getTextContent());
                        this.toPass.add(doc.getElementsByTagName("name").item(0).getTextContent());
                        this.toPass.add(doc.getElementsByTagName("room").item(0).getTextContent());
                        this.toPass.add(doc.getElementsByTagName("proUrl").item(0).getTextContent());
                        SearchStudent search = new SearchStudent(toPass, nFile);
                        search.setVisible(true);
                        search.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
                    }
                } catch (IOException | SAXException | ParserConfigurationException ex) {
                    Logger.getLogger(StartPage.class.getName()).log(Level.SEVERE, null, ex);
                }
                this.searchInput.setText("");
                this.searchRstLab.setForeground(Color.green);
                this.searchRstLab.setText("Record Found!");
            } else {
                toOpen = System.getProperty("user.home") + "/Documents/RFID Database/cards/" + this.searchInput.getText() + ".xml";
                nFile = new File(toOpen);
                if (nFile.exists()) {
                    try {
                        dBuilder = dbFactory.newDocumentBuilder();
                        doc = dBuilder.parse(nFile);
                        this.toPass = new ArrayList<String>();
                        this.toPass.add(doc.getElementsByTagName("name").item(0).getTextContent());
                        this.toPass.add(doc.getElementsByTagName("teachUrl").item(0).getTextContent());
                        this.toPass.add(doc.getElementsByTagName("stuUrl").item(0).getTextContent());
                        SearchCard search = new SearchCard(toPass, nFile);
                        search.setVisible(true);
                        search.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
                        this.searchInput.setText("");
                        this.searchRstLab.setForeground(Color.green);
                        this.searchRstLab.setText("Record Found!");
                    } catch (IOException | SAXException | ParserConfigurationException ex) {
                        Logger.getLogger(StartPage.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } else {
                    this.searchInput.setText("");
                    this.searchRstLab.setForeground(Color.red);
                    this.searchRstLab.setText("Search failed, no record found!");
                }
            }
        }
    }//GEN-LAST:event_searchInputKeyReleased

    // perform scanned result
    private void scanInputKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_scanInputKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            // Open the file with the tag name inputted from scanning
            String fCheck = System.getProperty("user.home") + "/Documents/RFID Database/cards/" + this.scanInput.getText() + ".xml";
            String sCheck = System.getProperty("user.home") + "/Documents/RFID Database/1/" + this.scanInput.getText() + ".xml";
            String finalUrl = "";
            DocumentBuilderFactory dbFactory = null;
            DocumentBuilder dBuilder = null;
            Document doc = null;
            Desktop desktop = Desktop.isDesktopSupported() ? Desktop.getDesktop() : null;
            File nFile = new File(fCheck);
            //check if it is a card scan
            if (nFile.exists()) {
                this.setFile(nFile);
                ScanTag scanTag = new ScanTag(this);
                scanTag.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
                scanTag.setVisible(true);
                this.scanRstLab.setForeground(Color.green);
                this.scanRstLab.setText("Record found!");
                this.scanInput.setText("");
                //if it is not a card, check student database
            } else {
                //read the url in the file
                nFile = new File(sCheck);
                if (!nFile.exists()) {
                    this.scanRstLab.setForeground(Color.red);
                    this.scanRstLab.setText("Scan failed, no record found!");
                    this.scanInput.setText("");
                    return;
                }
                try {
                    dbFactory = DocumentBuilderFactory.newInstance();
                    dBuilder = dbFactory.newDocumentBuilder();
                    doc = dBuilder.parse(nFile);
                    NodeList list = doc.getElementsByTagName("student");
                    finalUrl += ((Element) list.item(0)).getElementsByTagName("proUrl").item(0).getTextContent();

                    //direct to the url with default browser in Windows OS
                    if (desktop != null && desktop.isSupported(Desktop.Action.BROWSE) && finalUrl != "") {
                        desktop.browse(new URL(finalUrl).toURI());
                        this.scanRstLab.setForeground(Color.green);
                        this.scanRstLab.setText("Record found!");
                        this.scanInput.setText("");
                    } else {
                        this.scanRstLab.setForeground(Color.red);
                        this.scanRstLab.setText("Can not identify default Internet browser!");
                        this.scanInput.setText("");
                    }
                } catch (Exception ex) {
                    this.scanRstLab.setForeground(Color.red);
                    this.scanRstLab.setText("Scan failed, no record found!");
                    this.scanInput.setText("");
                }

            }

            /*
            For Mac
            Runtime runtime = Runtime.getRuntime();
            String[] args = {"osascript", "-e", "open location \"" + proURL + "\""};
            try {
                Process process = runtime.exec(args);
            } catch (IOException e) {

            }
             */
        }
    }//GEN-LAST:event_scanInputKeyPressed

    private void tabbedPanelStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tabbedPanelStateChanged
        // TODO add your handling code here:
        if (currentTabbedPanel == 0) {
            if (this.tabbedPanel.getSelectedIndex() != 0) {
                Password pass = new Password();
                pass.setVisible(true);
                pass.setParam(this, this.tabbedPanel);
                pass.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
                this.setVisible(false);
            }
        }
        this.currentTabbedPanel = tabbedPanel.getSelectedIndex();
    }//GEN-LAST:event_tabbedPanelStateChanged

    private void scanInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scanInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_scanInputActionPerformed

    public void clearInput() {
        userIDField.setText("");
        userNameField.setText("");
        prourlText.setText("");
        turlTxt.setText("");
    }

    private void setComboBox(Boolean b) {
        roomNoCombo.removeAllItems();
        if (b) {
            for (int i = 0; i < courseName.length; i++) {
                roomNoCombo.addItem(courseName[i]);
            }
        } else {
            roomNoCombo.addItem("1");
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StartPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StartPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StartPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StartPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new StartPage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton generateBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel prourlLbl;
    private javax.swing.JTextField prourlText;
    private javax.swing.JLabel registerLable;
    private javax.swing.JButton registerNext;
    private javax.swing.JPanel registerPanel;
    private javax.swing.JComboBox<String> roomBox;
    private javax.swing.JComboBox roomNoCombo;
    private javax.swing.JLabel roomNoLable;
    private javax.swing.JTextField scanInput;
    private javax.swing.JLabel scanLable;
    private javax.swing.JLabel scanRstLab;
    private javax.swing.JPanel scannerPanel;
    private javax.swing.JTextField searchInput;
    private javax.swing.JLabel searchLable;
    private javax.swing.JPanel searchPanel;
    private javax.swing.JLabel searchRstLab;
    private javax.swing.JTabbedPane tabbedPanel;
    private javax.swing.JLabel turlLab;
    private javax.swing.JTextField turlTxt;
    private javax.swing.JComboBox<String> userCombo;
    private javax.swing.ButtonGroup userGroup;
    private javax.swing.JTextField userIDField;
    private javax.swing.JLabel userIDLable;
    private javax.swing.JLabel userLable;
    private javax.swing.JTextField userNameField;
    private javax.swing.JLabel userNameLable;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the std
     */
    public Student getStd() {
        return std;
    }

    /**
     * @param std the std to set
     */
    public void setStd(Student std) {
        this.std = std;
    }

    /**
     * @return the tch
     */
    public Teacher getTch() {
        return tch;
    }

    /**
     * @param tch the tch to set
     */
    public void setTch(Teacher tch) {
        this.tch = tch;
    }

    /**
     * @return the toPass
     */
    public ArrayList getToPass() {
        return toPass;
    }

    /**
     * @param toPass the toPass to set
     */
    public void setToPass(ArrayList toPass) {
        this.toPass = toPass;
    }

    /**
     * @return the cd
     */
    public Card getCd() {
        return cd;
    }

    /**
     * @param cd the cd to set
     */
    public void setCd(Card cd) {
        this.cd = cd;
    }

    /**
     * @return the file
     */
    public File getFile() {
        return file;
    }

    /**
     * @param file the file to set
     */
    public void setFile(File file) {
        this.file = file;
    }

}
